        -:    0:Source:merge.c
        -:    0:Graph:merge.gcno
        -:    0:Data:merge.gcda
        -:    0:Runs:5
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include "../../include/macros.h"
        -:    3:
        -:    4://int testGrid[gridRows][gridCols] = { {16,8,2,2}, {4,4,0,0}, {0,0,0,0}, {0,0,0,0} };
        -:    5:
        -:    6:/*
        -:    7: * Params: 2D Array
        -:    8: * Return: Void
        -:    9: */
        -:   10:
        -:   11://static int score = 0;
        -:   12:
    #####:   13:void printArray(int matrix[gridRows][gridCols]){
        -:   14:
    #####:   15:    for(int i = 0; i < gridRows; i++){
    #####:   16:        for(int j = 0; j < gridCols ; j++){
    #####:   17:            printf("%d", matrix[i][j]);
    #####:   18:        }
    #####:   19:        printf("\n");
    #####:   20:    }
    #####:   21:}
        -:   22:
        -:   23:/*
        -:   24: * Params: int number
        -:   25: * Return: Sum of number
        -:   26: */
        -:   27:
        -:   28:/*
        -:   29: * Params: 2D Array
        -:   30: * Return: Single Row at specified index
        -:   31: */
        -:   32:
       28:   33:int *getRow(int matrix[gridRows][gridCols], int index){
       28:   34:    if (index < 0 || index >= gridRows){
    #####:   35:        printf("Fix the index value");
    #####:   36:        return NULL;
        -:   37:    } else {
       28:   38:        return matrix[index];
        -:   39:    }
       28:   40:}
        -:   41:
        -:   42:/*
        -:   43: * Params: 2D Array
        -:   44: * Return: Void (changes Column value)
        -:   45: */
        -:   46:
       16:   47:void getColumn(int matrix[gridRows][gridCols], int index, int column[gridCols]){
       16:   48:    if (index < 0 || index >= gridCols){
    #####:   49:        printf("Fix the index value");
    #####:   50:    } else {
       80:   51:        for (int i = 0; i < gridCols; i++){
        -:   52:            //Get first index of all rows
       64:   53:            column[i] = matrix[i][index]; 
       64:   54:        }
        -:   55:    }
       16:   56:}
        -:   57:
        -:   58:/*
        -:   59: * Params: Point to Array of Ints (Row)
        -:   60: * Return: Pointer to Array of Ints (Merged Row)
        -:   61: * Checks RIGHT to LEFT
        -:   62: */
        -:   63:
       20:   64:int *mergeRight(int *row, int *score){
       80:   65:    for (int i = (gridRows-1); i > 0; i--){
       60:   66:        if (row[i] == row[i-1]){
       43:   67:            row[i] += row[i-1];
       43:   68:            *score += 2 * row[i-1];
       43:   69:            row[i-1] = 0;
       43:   70:        }
       60:   71:    }
       20:   72:    return row;
        -:   73:}
        -:   74:
        -:   75:/*
        -:   76: * Params: Point to Array of Ints (Row)
        -:   77: * Return: Pointer to Array of Ints (Merged Row LEFT)
        -:   78: * Checks LEFT to RIGHT 
        -:   79: */
        -:   80:
        8:   81:int *mergeLeft(int *row, int *score){
       32:   82:    for (int i = 0; i < gridRows-1; i++){
       24:   83:        if (row[i+1] == row[i]){
       20:   84:            row[i] += row[i+1];
       20:   85:            *score += 2 * row[i+1];
       20:   86:            row[i+1] = 0;
       20:   87:        }
       24:   88:    }
        8:   89:    return row;
        -:   90:}
        -:   91:
        -:   92:/*
        -:   93: * Params: Point to Array of Ints (Row)
        -:   94: * Return: Pointer to Array of Ints (Merged Column)
        -:   95: * Checks LEFT to RIGHT
        -:   96: */
        -:   97:
        8:   98:int *mergeUp(int *column, int *score){
       40:   99:    for (int i = 0; i < gridCols; i++){
       32:  100:        if (column[i] == column[i+1]){
       16:  101:            column[i] += column[i+1];
       16:  102:            *score += 2 * column[i+1];
       16:  103:            column[i+1] = 0;
       16:  104:        }
       32:  105:    }
        8:  106:    return column;
        -:  107:}
        -:  108:
        -:  109:/*
        -:  110: * Params: Point to Array of Ints (Row)
        -:  111: * Return: Pointer to Array of Ints (Merged Column Down)
        -:  112: * Checks RIGHT to LEFT
        -:  113: */
        -:  114:
        8:  115:int *mergeDown(int *column, int *score){
       32:  116:    for (int i = (gridCols -1); i > 0; i--){
       24:  117:        if (column[i-1] == column[i]){
       18:  118:            column[i] += column[i-1];
       18:  119:            *score += 2 * column[i-1];
       18:  120:            column[i-1] = 0;
       18:  121:        }
       24:  122:    }
        8:  123:    return column;
        -:  124:}
        -:  125:
       16:  126:void mergeColumn(int matrix[gridRows][gridCols], int column[gridCols], int index){
       80:  127:        for (int i = 0; i < gridCols; i++){
        -:  128:            //Get first index of all rows
       64:  129:            matrix[i][index] = column[i]; 
       64:  130:        }
       16:  131:}
        -:  132:
        -:  133:/*
        -:  134: * Params: 2D Array, String Direction
        -:  135: * Return: Depends on Direction
        -:  136: */
        -:  137:
       11:  138:void merge(int matrix[gridRows][gridCols], int direction, int *score){
        -:  139:    //Merging Right = 1
        -:  140:    //Merging Left = 2
        -:  141:    //Merging Up = 3
        -:  142:    //Merging Down = 4
       11:  143:    if (direction == 1){
       25:  144:        for (int i = 0; i < gridRows; i++){
       20:  145:            int *row = getRow(matrix, i);
       20:  146:            mergeRight(row, score);
       20:  147:        }
        5:  148:    }
        -:  149:
       11:  150:    if (direction == 2){
       10:  151:        for (int i = 0; i < gridRows; i++){
        8:  152:            int *row = getRow(matrix, i);
        8:  153:            mergeLeft(row, score);
        8:  154:        }
        2:  155:    }
        -:  156:
       11:  157:    if (direction == 3){
        -:  158:        int columnArr[gridCols];
       10:  159:        for (int i = 0; i < gridCols; i++){
        8:  160:            getColumn(matrix, i, columnArr);
        8:  161:            mergeColumn(matrix, mergeUp(columnArr, score), i);
        8:  162:        }
        2:  163:    }
        -:  164:
       11:  165:    if (direction == 4){
        -:  166:        int columnArr[gridCols];
       10:  167:        for (int i = 0; i < gridCols; i++){
        8:  168:            getColumn(matrix, i, columnArr);
        8:  169:            mergeColumn(matrix, mergeDown(columnArr, score), i);
        8:  170:        }
        2:  171:    }
       11:  172:}
        -:  173:
        -:  174://int main(){
        -:  175://    printf("PRE MERGE: %d\n", getScore());
        -:  176://    printf("\nGRID PRE ACTION\n");
        -:  177://    printArray(testGrid);
        -:  178://
        -:  179://    printf("\nPRINTING gridCols MERGED DOWN\n");
        -:  180://    merge(testGrid, 2);
        -:  181://    printArray(testGrid);
        -:  182://
        -:  183://    printf("POST MERGE: %d\n", getScore());
        -:  184://    return 0;
        -:  185://}

        -:    0:Source:test_cases.c
        -:    0:Graph:test_cases.gcno
        -:    0:Data:test_cases.gcda
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:#include <stdio.h>
        -:    2:#include "merge.h"
        -:    3:#include "slide.h"
        -:    4:
        -:    5:// Utility function to print a grid
       40:    6:void printGrid(const int grid[4][4]) {
      200:    7:    for (int i = 0; i < 4; i++) {
      800:    8:        for (int j = 0; j < 4; j++) {
      640:    9:            printf("%4d", grid[i][j]);
      640:   10:        }
      160:   11:        printf("\n");
      160:   12:    }
       40:   13:    printf("\n");
       40:   14:}
        -:   15:
        -:   16:// Function to compare two grids
    #####:   17:int compareGrids(const int grid1[4][4], const int grid2[4][4]) {
    #####:   18:    for (int i = 0; i < 4; i++) {
    #####:   19:        for (int j = 0; j < 4; j++) {
    #####:   20:            if (grid1[i][j] != grid2[i][j]) {
    #####:   21:                return 0;
        -:   22:            }
    #####:   23:        }
    #####:   24:    }
    #####:   25:    return 1;
    #####:   26:}
        -:   27:
        -:   28:// Test the merge functionality
    #####:   29:void testMerge() {
    #####:   30:    printf("Testing Merge Function...\n");
        -:   31:
    #####:   32:    int score = 0;
        -:   33:
        -:   34:    // Test Case: Merge Right
    #####:   35:    int gridRight[4][4] = {
        -:   36:        {2, 2, 4, 4},
        -:   37:        {4, 4, 0, 0},
        -:   38:        {2, 2, 2, 2},
        -:   39:        {0, 0, 0, 0}
        -:   40:    };
    #####:   41:    int expectedRight[4][4] = {
        -:   42:        {0, 0, 4, 8},
        -:   43:        {0, 0, 0, 8},
        -:   44:        {0, 0, 4, 4},
        -:   45:        {0, 0, 0, 0}
        -:   46:    };
    #####:   47:    printf("Grid Before Merge Right:\n");
    #####:   48:    printGrid(gridRight);
    #####:   49:    merge(gridRight, 1, &score); // Direction 1: Right
    #####:   50:    printf("Grid After Merge Right:\n");
    #####:   51:    printGrid(gridRight);
    #####:   52:    if (compareGrids(gridRight, expectedRight)) {
    #####:   53:        printf("Merge Right Test Passed!\n");
    #####:   54:    } else {
    #####:   55:        printf("Merge Right Test Failed!\n");
        -:   56:    }
        -:   57:
        -:   58:    // Test Case: Merge Left
    #####:   59:    int gridLeft[4][4] = {
        -:   60:        {2, 2, 4, 4},
        -:   61:        {4, 4, 0, 0},
        -:   62:        {2, 2, 2, 2},
        -:   63:        {0, 0, 0, 0}
        -:   64:    };
    #####:   65:    int expectedLeft[4][4] = {
        -:   66:        {4, 8, 0, 0},
        -:   67:        {8, 0, 0, 0},
        -:   68:        {4, 4, 0, 0},
        -:   69:        {0, 0, 0, 0}
        -:   70:    };
    #####:   71:    printf("Grid Before Merge Left:\n");
    #####:   72:    printGrid(gridLeft);
    #####:   73:    merge(gridLeft, 2, &score); // Direction 2: Left
    #####:   74:    printf("Grid After Merge Left:\n");
    #####:   75:    printGrid(gridLeft);
    #####:   76:    if (compareGrids(gridLeft, expectedLeft)) {
    #####:   77:        printf("Merge Left Test Passed!\n");
    #####:   78:    } else {
    #####:   79:        printf("Merge Left Test Failed!\n");
        -:   80:    }
        -:   81:
        -:   82:    // Test Case: Merge Up
    #####:   83:    int gridUp[4][4] = {
        -:   84:        {2, 2, 0, 0},
        -:   85:        {2, 4, 0, 0},
        -:   86:        {4, 4, 4, 4},
        -:   87:        {4, 0, 4, 4}
        -:   88:    };
    #####:   89:    int expectedUp[4][4] = {
        -:   90:        {4, 2, 8, 8},
        -:   91:        {8, 4, 0, 0},
        -:   92:        {0, 0, 0, 0},
        -:   93:        {0, 0, 0, 0}
        -:   94:    };
    #####:   95:    printf("Grid Before Merge Up:\n");
    #####:   96:    printGrid(gridUp);
    #####:   97:    merge(gridUp, 3, &score); // Direction 3: Up
    #####:   98:    printf("Grid After Merge Up:\n");
    #####:   99:    printGrid(gridUp);
    #####:  100:    if (compareGrids(gridUp, expectedUp)) {
    #####:  101:        printf("Merge Up Test Passed!\n");
    #####:  102:    } else {
    #####:  103:        printf("Merge Up Test Failed!\n");
        -:  104:    }
        -:  105:
        -:  106:    // Test Case: Merge Down
    #####:  107:    int gridDown[4][4] = {
        -:  108:        {2, 2, 0, 0},
        -:  109:        {2, 4, 0, 0},
        -:  110:        {4, 4, 4, 4},
        -:  111:        {4, 0, 4, 4}
        -:  112:    };
    #####:  113:    int expectedDown[4][4] = {
        -:  114:        {0, 0, 0, 0},
        -:  115:        {0, 0, 0, 0},
        -:  116:        {4, 2, 0, 0},
        -:  117:        {8, 8, 8, 8}
        -:  118:    };
    #####:  119:    printf("Grid Before Merge Down:\n");
    #####:  120:    printGrid(gridDown);
    #####:  121:    merge(gridDown, 4, &score); // Direction 4: Down
    #####:  122:    printf("Grid After Merge Down:\n");
    #####:  123:    printGrid(gridDown);
    #####:  124:    if (compareGrids(gridDown, expectedDown)) {
    #####:  125:        printf("Merge Down Test Passed!\n");
    #####:  126:    } else {
    #####:  127:        printf("Merge Down Test Failed!\n");
        -:  128:    }
    #####:  129:}
        -:  130:
        -:  131:// Test the slide functionality
    #####:  132:void testSlide() {
    #####:  133:    printf("Testing Slide Function...\n");
        -:  134:
        -:  135:    // Test Case: Slide Right
    #####:  136:    int gridRight[4][4] = {
        -:  137:        {0, 2, 2, 4},
        -:  138:        {4, 0, 4, 0},
        -:  139:        {0, 0, 2, 2},
        -:  140:        {0, 0, 0, 0}
        -:  141:    };
    #####:  142:    int expectedRight[4][4] = {
        -:  143:        {0, 0, 4, 4},
        -:  144:        {0, 0, 0, 8},
        -:  145:        {0, 0, 0, 4},
        -:  146:        {0, 0, 0, 0}
        -:  147:    };
    #####:  148:    printf("Grid Before Slide Right:\n");
    #####:  149:    printGrid(gridRight);
    #####:  150:    slide(gridRight, 1); // Direction 1: Right
    #####:  151:    printf("Grid After Slide Right:\n");
    #####:  152:    printGrid(gridRight);
    #####:  153:    if (compareGrids(gridRight, expectedRight)) {
    #####:  154:        printf("Slide Right Test Passed!\n");
    #####:  155:    } else {
    #####:  156:        printf("Slide Right Test Failed!\n");
        -:  157:    }
        -:  158:
        -:  159:    // Test Case: Slide Left
    #####:  160:    int gridLeft[4][4] = {
        -:  161:        {0, 2, 2, 4},
        -:  162:        {4, 0, 4, 0},
        -:  163:        {0, 0, 2, 2},
        -:  164:        {0, 0, 0, 0}
        -:  165:    };
    #####:  166:    int expectedLeft[4][4] = {
        -:  167:        {4, 4, 0, 0},
        -:  168:        {8, 0, 0, 0},
        -:  169:        {4, 0, 0, 0},
        -:  170:        {0, 0, 0, 0}
        -:  171:    };
    #####:  172:    printf("Grid Before Slide Left:\n");
    #####:  173:    printGrid(gridLeft);
    #####:  174:    slide(gridLeft, 2); // Direction 2: Left
    #####:  175:    printf("Grid After Slide Left:\n");
    #####:  176:    printGrid(gridLeft);
    #####:  177:    if (compareGrids(gridLeft, expectedLeft)) {
    #####:  178:        printf("Slide Left Test Passed!\n");
    #####:  179:    } else {
    #####:  180:        printf("Slide Left Test Failed!\n");
        -:  181:    }
        -:  182:
        -:  183:    // Test Case: Slide Up
    #####:  184:    int gridUp[4][4] = {
        -:  185:        {2, 2, 0, 0},
        -:  186:        {2, 0, 4, 4},
        -:  187:        {4, 0, 4, 0},
        -:  188:        {4, 4, 0, 0}
        -:  189:    };
    #####:  190:    int expectedUp[4][4] = {
        -:  191:        {4, 2, 8, 4},
        -:  192:        {8, 4, 0, 0},
        -:  193:        {0, 0, 0, 0},
        -:  194:        {0, 0, 0, 0}
        -:  195:    };
    #####:  196:    printf("Grid Before Slide Up:\n");
    #####:  197:    printGrid(gridUp);
    #####:  198:    slide(gridUp, 3); // Direction 3: Up
    #####:  199:    printf("Grid After Slide Up:\n");
    #####:  200:    printGrid(gridUp);
    #####:  201:    if (compareGrids(gridUp, expectedUp)) {
    #####:  202:        printf("Slide Up Test Passed!\n");
    #####:  203:    } else {
    #####:  204:        printf("Slide Up Test Failed!\n");
        -:  205:    }
        -:  206:
        -:  207:    // Test Case: Slide Down
    #####:  208:    int gridDown[4][4] = {
        -:  209:        {2, 2, 0, 0},
        -:  210:        {2, 0, 4, 4},
        -:  211:        {4, 0, 4, 0},
        -:  212:        {4, 4, 0, 0}
        -:  213:    };
    #####:  214:    int expectedDown[4][4] = {
        -:  215:        {0, 0, 0, 0},
        -:  216:        {0, 0, 0, 0},
        -:  217:        {4, 2, 0, 0},
        -:  218:        {8, 4, 8, 4}
        -:  219:    };
    #####:  220:    printf("Grid Before Slide Down:\n");
    #####:  221:    printGrid(gridDown);
    #####:  222:    slide(gridDown, 4); // Direction 4: Down
    #####:  223:    printf("Grid After Slide Down:\n");
    #####:  224:    printGrid(gridDown);
    #####:  225:    if (compareGrids(gridDown, expectedDown)) {
    #####:  226:        printf("Slide Down Test Passed!\n");
    #####:  227:    } else {
    #####:  228:        printf("Slide Down Test Failed!\n");
        -:  229:    }
    #####:  230:}
        -:  231:
    #####:  232:int main() {
    #####:  233:    testMerge();
    #####:  234:    testSlide();
    #####:  235:    return 0;
        -:  236:}

        -:    0:Source:2048_test_cases.c
        -:    0:Graph:/Users/guest.user/the-team-assignment-team-2-the-matrix/src/backend/2048_test_cases_files/2048_test_cases.gcno
        -:    0:Data:/Users/guest.user/the-team-assignment-team-2-the-matrix/src/backend/2048_test_cases_files/2048_test_cases.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <assert.h>
        -:    3:
        -:    4:#define GRID_SIZE 4
        -:    5:
        -:    6:int grid[GRID_SIZE][GRID_SIZE];
        -:    7:
        -:    8:// Function to print the grid
        8:    9:void printGrid() {
       40:   10:    for (int i = 0; i < GRID_SIZE; i++) {
      160:   11:        for (int j = 0; j < GRID_SIZE; j++) {
      128:   12:            printf("%4d", grid[i][j]);
      128:   13:        }
       32:   14:        printf("\n");
       32:   15:    }
        8:   16:    printf("\n");
        8:   17:}
        -:   18:
        -:   19:// Function to copy a test grid into the global grid
        4:   20:void copyGrid(int source[GRID_SIZE][GRID_SIZE]) {
       20:   21:    for (int i = 0; i < GRID_SIZE; i++) {
       80:   22:        for (int j = 0; j < GRID_SIZE; j++) {
       64:   23:            grid[i][j] = source[i][j];
       64:   24:        }
       16:   25:    }
        4:   26:}
        -:   27:
        -:   28:// Updated combineLeft function
        2:   29:void combineLeft() {
       10:   30:    for (int i = 0; i < GRID_SIZE; i++) {
        8:   31:        int insertPosition = 0; // Position to insert the next valid tile
       40:   32:        for (int j = 0; j < GRID_SIZE; j++) {
       32:   33:            if (grid[i][j] != 0) {
       18:   34:                if (insertPosition > 0 && grid[i][insertPosition - 1] == grid[i][j]) {
        -:   35:                    // Combine with the previous tile
        8:   36:                    grid[i][insertPosition - 1] *= 2;
        8:   37:                    grid[i][j] = 0;
        8:   38:                } else {
        -:   39:                    // Move the tile to the insert position
       10:   40:                    if (insertPosition != j) {
        4:   41:                        grid[i][insertPosition] = grid[i][j];
        4:   42:                        grid[i][j] = 0;
        4:   43:                    }
       10:   44:                    insertPosition++;
        -:   45:                }
       18:   46:            }
       32:   47:        }
        8:   48:    }
        2:   49:}
        -:   50:
        -:   51:// Function to slide tiles to the left
        2:   52:void slideLeft() {
       10:   53:    for (int i = 0; i < GRID_SIZE; i++) {
        8:   54:        int insertPosition = 0;
       40:   55:        for (int j = 0; j < GRID_SIZE; j++) {
       32:   56:            if (grid[i][j] != 0) {
       14:   57:                grid[i][insertPosition++] = grid[i][j];
       14:   58:            }
       32:   59:        }
       26:   60:        while (insertPosition < GRID_SIZE) {
       18:   61:            grid[i][insertPosition++] = 0;
        -:   62:        }
        8:   63:    }
        2:   64:}
        -:   65:
        -:   66:// Function to test the combining tiles method
        2:   67:void testCombineTiles() {
        2:   68:    printf("Testing Combine Tiles...\n");
        -:   69:
        2:   70:    int testGrid[4][4] = {
        -:   71:        {2, 2, 0, 0},
        -:   72:        {4, 4, 4, 4},
        -:   73:        {8, 0, 8, 8},
        -:   74:        {0, 0, 0, 0}
        -:   75:    };
        2:   76:    int expectedGrid[4][4] = {
        -:   77:        {4, 0, 0, 0},
        -:   78:        {8, 8, 0, 0},
        -:   79:        {16, 8, 0, 0},
        -:   80:        {0, 0, 0, 0}
        -:   81:    };
        -:   82:
        2:   83:    copyGrid(testGrid);
        -:   84:
        2:   85:    printf("Grid Before Combine:\n");
        2:   86:    printGrid();
        -:   87:
        2:   88:    combineLeft();
        -:   89:
        2:   90:    printf("Grid After Combine:\n");
        2:   91:    printGrid();
        -:   92:
       10:   93:    for (int i = 0; i < GRID_SIZE; i++) {
       40:   94:        for (int j = 0; j < GRID_SIZE; j++) {
       32:   95:            if (grid[i][j] != expectedGrid[i][j]) {
    #####:   96:                printf("Mismatch at [%d][%d]: Expected %d, Got %d\n",
    #####:   97:                       i, j, expectedGrid[i][j], grid[i][j]);
    #####:   98:            }
       32:   99:            assert(grid[i][j] == expectedGrid[i][j]);
       32:  100:        }
        8:  101:    }
        2:  102:    printf("Combine Tiles Test Passed.\n");
        2:  103:}
        -:  104:
        -:  105:// Function to test the sliding tiles method
        2:  106:void testSlideTiles() {
        2:  107:    printf("Testing Slide Tiles...\n");
        -:  108:
        2:  109:    int testGrid[4][4] = {
        -:  110:        {2, 0, 2, 4},
        -:  111:        {0, 4, 0, 4},
        -:  112:        {8, 0, 8, 0},
        -:  113:        {0, 0, 0, 0}
        -:  114:    };
        2:  115:    int expectedGrid[4][4] = {
        -:  116:        {2, 2, 4, 0},
        -:  117:        {4, 4, 0, 0},
        -:  118:        {8, 8, 0, 0},
        -:  119:        {0, 0, 0, 0}
        -:  120:    };
        -:  121:
        2:  122:    copyGrid(testGrid);
        -:  123:
        2:  124:    printf("Grid Before Slide:\n");
        2:  125:    printGrid();
        -:  126:
        2:  127:    slideLeft();
        -:  128:
        2:  129:    printf("Grid After Slide:\n");
        2:  130:    printGrid();
        -:  131:
       10:  132:    for (int i = 0; i < GRID_SIZE; i++) {
       40:  133:        for (int j = 0; j < GRID_SIZE; j++) {
       32:  134:            if (grid[i][j] != expectedGrid[i][j]) {
    #####:  135:                printf("Mismatch at [%d][%d]: Expected %d, Got %d\n",
    #####:  136:                       i, j, expectedGrid[i][j], grid[i][j]);
    #####:  137:            }
       32:  138:            assert(grid[i][j] == expectedGrid[i][j]);
       32:  139:        }
        8:  140:    }
        2:  141:    printf("Slide Tiles Test Passed.\n");
        2:  142:}
        -:  143:
        2:  144:int main() {
        -:  145:    // Run test cases
        2:  146:    testCombineTiles();
        2:  147:    testSlideTiles();
        -:  148:
        2:  149:    return 0;
        -:  150:}
